/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UploadFileImport } from './routes/upload-file'
import { Route as SettingsImport } from './routes/settings'
import { Route as DocumentsImport } from './routes/documents'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AnalysisImport } from './routes/analysis'

// Create/Update Routes

const UploadFileRoute = UploadFileImport.update({
  id: '/upload-file',
  path: '/upload-file',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const DocumentsRoute = DocumentsImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AnalysisRoute = AnalysisImport.update({
  id: '/analysis',
  path: '/analysis',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/analysis': {
      id: '/analysis'
      path: '/analysis'
      fullPath: '/analysis'
      preLoaderRoute: typeof AnalysisImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/documents': {
      id: '/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/upload-file': {
      id: '/upload-file'
      path: '/upload-file'
      fullPath: '/upload-file'
      preLoaderRoute: typeof UploadFileImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/settings': typeof SettingsRoute
  '/upload-file': typeof UploadFileRoute
}

export interface FileRoutesByTo {
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/settings': typeof SettingsRoute
  '/upload-file': typeof UploadFileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/settings': typeof SettingsRoute
  '/upload-file': typeof UploadFileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/analysis'
    | '/dashboard'
    | '/documents'
    | '/settings'
    | '/upload-file'
  fileRoutesByTo: FileRoutesByTo
  to: '/analysis' | '/dashboard' | '/documents' | '/settings' | '/upload-file'
  id:
    | '__root__'
    | '/analysis'
    | '/dashboard'
    | '/documents'
    | '/settings'
    | '/upload-file'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AnalysisRoute: typeof AnalysisRoute
  DashboardRoute: typeof DashboardRoute
  DocumentsRoute: typeof DocumentsRoute
  SettingsRoute: typeof SettingsRoute
  UploadFileRoute: typeof UploadFileRoute
}

const rootRouteChildren: RootRouteChildren = {
  AnalysisRoute: AnalysisRoute,
  DashboardRoute: DashboardRoute,
  DocumentsRoute: DocumentsRoute,
  SettingsRoute: SettingsRoute,
  UploadFileRoute: UploadFileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/analysis",
        "/dashboard",
        "/documents",
        "/settings",
        "/upload-file"
      ]
    },
    "/analysis": {
      "filePath": "analysis.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/documents": {
      "filePath": "documents.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/upload-file": {
      "filePath": "upload-file.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
